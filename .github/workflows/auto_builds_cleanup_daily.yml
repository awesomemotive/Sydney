name: Auto-builds Daily Cleanup

# This workflow runs daily, gets all the branches from the repository,
# gets all the auto-builds from the staging server,
# and deletes any auto-builds that don't have a corresponding branch.
# This is to ensure that the staging server doesn't get filled up with old, unused builds.

'on':
  workflow_dispatch: # Allows the workflow to be triggered manually from the GitHub UI.
  schedule:
    - cron: '1 0 * * *' # Runs the workflow every day at 00:01.

env:
  builds-directory: ~/builds/athemes

jobs:
  cleaning:
    name: Delete builds for non existing branches
    runs-on: self-hosted

    steps:

      # This step checks out the code to allow the workflow to access it.
      - name: Checkout code
        uses: actions/checkout@v4

      # This action exposes GitHub environment variables to be used in subsequent steps.
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v2.8.0

      # This step extracts the repository name from the full repository path and sets it as a PROJECT_NAME environment variable.
      # e.g. if the repository is aThemes/merchant, the project name will be "merchant".
      - name: Set Project Name
        run: |
          repo_full_name="${{ github.repository }}"
          repo_short_name="${repo_full_name##*/}"
          echo "PROJECT_NAME=${repo_short_name,,}" >> $GITHUB_ENV

      # This step fetches the latest list of remote branches, formats the branch names, and saves them to a file named branches.txt.
      # The formatting removes the "origin/" prefix and replaces slashes and dots with hyphens.
      - name: Prepare list of branches
        run: |
          git remote update --prune
          git branch -r > branches.txt
          sed -i 's/  origin\///g' branches.txt
          sed -i 's/\//-/g' branches.txt
          sed -i 's/\./-/g' branches.txt

      # This step connects to the staging server via SSH and lists the contents of the auto-builds directory for the current project.
      # The list of auto-builds is saved to a file named auto-builds.txt.
      - name: Get list of auto-builds
        run: ssh -p18765 staging@${{ secrets.WPFORMS_STAGING_HOST }} "cd /home/staging/shared/hub.wpforms.com/builds/athemes/${{ env.PROJECT_NAME }} && ls" > auto-builds.txt

      # This step reads the auto-builds.txt file line by line.
      # For each auto-build, it checks if a corresponding branch exists in the branches.txt file.
      # If a branch does not exist, it deletes the auto-build directory from the staging server.
      - name: Delete auto-builds if they're not in the list of branches
        run: |
          while read -r dir; do
            echo "Checking auto-build: $dir"
            if [ "$dir" = "index.php" ]
            then
              continue
            fi
            if ! grep -q "$dir" branches.txt
            then
              echo "Deleting auto-build: $dir"
              ssh -n -p18765 staging@${{ secrets.WPFORMS_STAGING_HOST }} "cd /home/staging/shared/hub.wpforms.com/builds/athemes/${{ env.PROJECT_NAME }} && rm -rf $dir"
            fi
          done < auto-builds.txt

      # The list of auto-builds is saved to a file named auto-builds.txt.
      - name: Get list of local builds
        run: ls ${{ env.builds-directory }}/${{ env.PROJECT_NAME }} > local-builds.txt

      - name: Delete local builds if they're not in the list of branches
        run: |
          while read -r dir; do
            echo "Checking auto-build: $dir"
            if ! grep -q "$dir" branches.txt
            then
              echo "Deleting local-build: $dir"
              cd ${{ env.builds-directory }}/${{ env.PROJECT_NAME }} && rm -rf $dir
            fi
          done < local-builds.txt
